public class BinaryTree {
    Node root;

    public BinaryTree() {
        this.root = null;
    }

    // Insert method
    public void insert(int value) {
        if (root == null) {
            root = new Node(value);
        } else {
            insertRecursively(root, value);
        }
    }

    // Recursive insert helper
    private void insertRecursively(Node currentNode, int value) {
        if (value == currentNode.value) {
            // Skip duplicate
            return;
        }

        if (value < currentNode.value) {
            if (currentNode.left == null) {
                currentNode.left = new Node(value);
            } else {
                insertRecursively(currentNode.left, value);
            }
        } else {
            if (currentNode.right == null) {
                currentNode.right = new Node(value);
            } else {
                insertRecursively(currentNode.right, value);
            }
        }
    }

    // In-order traversal
    public void printInOrder() {
        printInOrderRecursively(root);
    }

    private void printInOrderRecursively(Node node) {
        if (node != null) {
            printInOrderRecursively(node.left);
            System.out.print(node.value + " ");
            printInOrderRecursively(node.right);
        }
    }

    // Main method to test
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();

        // Insert nodes
        int[] values = {50, 30, 70, 20, 40, 60, 80, 70}; // 70 is duplicate
        for (int value : values) {
            tree.insert(value);
        }

        // Print the tree
        System.out.print("In-order Traversal: ");
        tree.printInOrder(); // Output: 20 30 40 50 60 70 80
    }
}

// Node class
class Node {
    int value;
    Node left;
    Node right;

    public Node(int value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}
